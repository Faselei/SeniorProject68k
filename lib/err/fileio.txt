F00:0001       ;===============================================================================
F00:0002       ;fileio.asm
F00:0003       ;===============================================================================
F00:0004       ;FileAccess
F00:0005       ;-------------------------------------------------------------------------------
F00:0006       	include "errno.inc"
F01:0001       ;===============================================================================
F01:0002       ;errno.inc
F01:0003       ;===============================================================================
F01:0004       ;Defines the error codes for things supporting it, should be the same as in
F01:0005       ;errno.h
F01:0006       ;-------------------------------------------------------------------------------
F01:0007       
F01:0008       NONE equ 0
F01:0009       FILE_NOT_FOUND equ 1
F01:0010       DOES_NOT_EXIST equ 2
F01:0011       BAD_ADDRESS equ 3
F01:0012       IO_ERROR equ 4
F01:0013       DEADLOCK equ 5
F01:0014       TOO_LONG equ 6
F01:0015       OUT_OF_MEMORY equ 7
F01:0016       OUT_OF_BOUNDS equ 8
F01:0017       UNKNOWN_INPUT equ 9
F01:0018       
F01:0019       ;///////////////////////////////////////////////////////////////////////////////
F01:0020       	section	"BSS",bss
F01:0021       
F01:0022       ;	public	_errno
F01:0023       ;_errno	ds.l	1
F01:0024       
F01:0025       ;///////////////////////////////////////////////////////////////////////////////
F01:0026       
F01:0027       
F00:0007       	include "fileio.inc"
F02:0001       ;===============================================================================
F02:0002       ;fileio.inc
F02:0003       ;===============================================================================
F02:0004       ;define some constants for the file.asm, also to include them in other asm files
F02:0005       ;-------------------------------------------------------------------------------
F02:0006       
F02:0007       ;FILE struct constants
F02:0008       FILE_DATA equ 0
F02:0009       FILE_SIZE equ 4
F02:0010       
F02:0011       ;PAK file constants
F02:0012       PAK_ID equ 0
F02:0013       PAK_FILETABLE equ 4
F02:0014       PAK_FILETABLESIZE equ 8
F02:0015       
F02:0016       
F02:0017       
F02:0018       
F00:0008       ;///////////////////////////////////////////////////////////////////////////////
F00:0009       	section	"BSS",bss
F00:0010       
F00:0011       ;we store some calculations for our own reference later
F00:0012       fileTableStart ds.l 1
F00:0013       totalFiles ds.l	1
F00:0014       
F00:0015       ;///////////////////////////////////////////////////////////////////////////////
F00:0016       	section	"DATA",data
F00:0017       ;///////////////////////////////////////////////////////////////////////////////
F00:0018       	section	"CODE",code
F00:0019       
F00:0020       ;---------------------------------------
F00:0021       ;_flipEndian
F00:0022       ;
F00:0023       ;Description
F00:0024       ;
F00:0025       ;Calling Convention
F00:0026       ;	move.l	d0,-(sp)
F00:0027       ;	bsr	flipEndian
F00:0028       ;	addq.w	#8,sp
F00:0029       ;d0 = ouput
F00:0030       ;---------------------------------------
F00:0031       	public	_flipEndian
F00:0032       _flipEndian:
F00:0033       	link	a5,#0
               S03:00000000:  4E 55 00 00
F00:0034       	move.l	(8,a5),d0
               S03:00000004:  20 2D 00 08
F00:0035       	rol.w	#8,d0
               S03:00000008:  E1 58
F00:0036       	swap	d0
               S03:0000000A:  48 40
F00:0037       	rol.w	#8,d0
               S03:0000000C:  E1 58
F00:0038       	unlk	a5
               S03:0000000E:  4E 5D
F00:0039       	rts
               S03:00000010:  4E 75
F00:0040       ;---------------------------------------
F00:0041       ;_FileSystemInit
F00:0042       ;
F00:0043       ;Needs to call this once to start
F00:0044       ;
F00:0045       ;Calling Convention
F00:0046       ;
F00:0047       ;---------------------------------------
F00:0048       	public	_InitFileSystem
F00:0049       _InitFileSystem:
F00:0050       	link	a5,#0
               S03:00000012:  4E 55 00 00
F00:0051       
F00:0052       ;file table start address
F00:0053       	move.l	#_pak0,a0
               S03:00000016:  41 F9 00 00 00 00 [R]
F00:0054       	move.l	(PAK_FILETABLE,a0),d0	;start of the file table
               S03:0000001C:  20 28 00 04
F00:0055       	move.l	d0,-(sp)
               S03:00000020:  2F 00
F00:0056       	bsr	_flipEndian
               S03:00000022:  61 DC
F00:0057       	add.l	a0,d0
               S03:00000024:  D0 88
F00:0058       	move.l	d0,fileTableStart
               S03:00000026:  23 C0 00 00 00 00 [R]
F00:0059       
F00:0060       ;total number of files
F00:0061       	move.l	(PAK_FILETABLESIZE,a0),d0	;total file table size
               S03:0000002C:  20 28 00 08
F00:0062       	move.l	d0,-(sp)
               S03:00000030:  2F 00
F00:0063       	bsr	_flipEndian
               S03:00000032:  61 CC
F00:0064       	addq.w	#4,sp
               S03:00000034:  58 4F
F00:0065       	lsr.l	#6,d0		;number of files = total size / 64
               S03:00000036:  EC 88
F00:0066       	move.l	d0,totalFiles
               S03:00000038:  23 C0 00 00 00 04 [R]
F00:0067       
F00:0068       	unlk	a5
               S03:0000003E:  4E 5D
F00:0069       	rts
               S03:00000040:  4E 75
F00:0070       
F00:0071       ;---------------------------------------
F00:0072       ;_fopen
F00:0073       ;
F00:0074       ;malloc a file struct and populate the
F00:0075       ;struct.
F00:0076       ;
F00:0077       ;Calling Convention:
F00:0078       ;	move.l	_string,-(sp)
F00:0079       ;	bsr	_fopen
F00:0080       ;	addq.w	#4,sp
F00:0081       ;
F00:0082       ;	FILE* fopen(char* filename);
F00:0083       ;---------------------------------------
F00:0084       ;d2 = number of files to look through
F00:0085       ;d3 = file struct
F00:0086       ;a2 = input string
F00:0087       ;a3 = current file in pak
F00:0088       
F00:0089       	public	_fopen
F00:0090       _fopen:	link	a5,#0
               S03:00000042:  4E 55 00 00
F00:0091       	movem.l	d2-d3/a2-a3,-(sp)
               S03:00000046:  48 E7 30 30
F00:0092       
F00:0093       ;input string
F00:0094       	move.l	(8,a5),a2
               S03:0000004A:  24 6D 00 08
F00:0095       
F00:0096       ;start of the file table
F00:0097       	move.l	fileTableStart,a3
               S03:0000004E:  26 79 00 00 00 00 [R]
F00:0098       
F00:0099       ;number of files in pak file
F00:0100       	move.l	totalFiles,d2
               S03:00000054:  24 39 00 00 00 04 [R]
F00:0101       	bra	.enter
               S03:0000005A:  60 12
F00:0102       
F00:0103       ;do strcmp to see if the string in the file table is what we want
F00:0104       .loop	move.l	a2,-(sp)
               S03:0000005C:  2F 0A
F00:0105       	move.l	a3,-(sp)
               S03:0000005E:  2F 0B
F00:0106       	bsr	_strcmp
               S03:00000060:  61 00 00 00 [R]
F00:0107       	addq.w	#8,sp
               S03:00000064:  50 4F
F00:0108       	tst.l	d0
               S03:00000066:  4A 80
F00:0109       	beq	.found
               S03:00000068:  67 16
F00:0110       	add.l	#64,a3		;move onto next file by adding 64
               S03:0000006A:  47 EB 00 40
F00:0111       .enter:	dbra	d2,.loop
               S03:0000006E:  51 CA FF EC
F00:0112       
F00:0113       ;fine not found
F00:0114       	move.l	#FILE_NOT_FOUND,_errno
               S03:00000072:  23 FC 00 00 00 01 00 00 00 00 [R]
F00:0115       	moveq	#0,d0
               S03:0000007C:  70 00
F00:0116       	bra	.exit
               S03:0000007E:  60 36
F00:0117       
F00:0118       ;found the file
F00:0119       .found:	pea	8	;number of bytes needed for file struct
               S03:00000080:  48 78 00 08
F00:0120       	bsr	_malloc	;and attempt to allocate that memory
               S03:00000084:  61 00 00 00 [R]
F00:0121       	addq.w	#4,sp
               S03:00000088:  58 4F
F00:0122       	tst.l	d0	;did that fail?
               S03:0000008A:  4A 80
F00:0123       	beq	.exit	;well now we have a problem now do we
               S03:0000008C:  67 28
F00:0124       	move.l	d0,a0	;need to do this for hacks
               S03:0000008E:  20 40
F00:0125       	move.l	(56,a3),d0	;offset from _pak0 to file
               S03:00000090:  20 2B 00 38
F00:0126       	move.l	d0,-(sp)
               S03:00000094:  2F 00
F00:0127       	bsr	_flipEndian
               S03:00000096:  61 00 FF 68
F00:0128       	addq.w	#4,sp
               S03:0000009A:  58 4F
F00:0129       	move.l	d0,(FILE_DATA,a0)
               S03:0000009C:  20 80
F00:0130       	add.l	#_pak0,(FILE_DATA,a0)	;set to physical address
               S03:0000009E:  06 90 00 00 00 00 [R]
F00:0131       	move.l	(60,a3),d0	;size
               S03:000000A4:  20 2B 00 3C
F00:0132       	move.l	d0,-(sp)
               S03:000000A8:  2F 00
F00:0133       	bsr	_flipEndian
               S03:000000AA:  61 00 FF 54
F00:0134       	addq.w	#4,sp
               S03:000000AE:  58 4F
F00:0135       	move.l	d0,(FILE_SIZE,a0)	;store size in correct endian
               S03:000000B0:  21 40 00 04
F00:0136       	move.l	a0,d0
               S03:000000B4:  20 08
F00:0137       .exit:	movem.l	(sp)+,d2-d3/a2-a3
               S03:000000B6:  4C DF 0C 0C
F00:0138       	unlk	a5
               S03:000000BA:  4E 5D
F00:0139       	rts
               S03:000000BC:  4E 75
F00:0140       
F00:0141       ;---------------------------------------
F00:0142       ;_fclose
F00:0143       ;
F00:0144       ;closes a file and deletes the file pointer
F00:0145       ;
F00:0146       ;Calling Convention
F00:0147       ;void	_fclose(FILE* file);
F00:0148       ;
F00:0149       ;	move.l	file,-(sp)
F00:0150       ;	bsr	_fclose
F00:0151       ;---------------------------------------
F00:0152       	public	_fclose
F00:0153       _fclose:
F00:0154       	link	a5,#0
               S03:000000BE:  4E 55 00 00
F00:0155       	move.l	(8,a5),d0
               S03:000000C2:  20 2D 00 08
F00:0156       	move.l	d0,-(sp)
               S03:000000C6:  2F 00
F00:0157       	bsr	_free
               S03:000000C8:  61 00 00 00 [R]
F00:0158       	addq.w	#4,sp
               S03:000000CC:  58 4F
F00:0159       	unlk	a5
               S03:000000CE:  4E 5D
F00:0160       	rts
               S03:000000D0:  4E 75
F00:0161       
F00:0162       ;---------------------------------------
F00:0163       ;Function Name
F00:0164       ;
F00:0165       ;Description
F00:0166       ;
F00:0167       ;Calling Convention
F00:0168       ;
F00:0169       ;---------------------------------------
F00:0170       


Sections:
S01  BSS
S02  DATA
S03  CODE


Sources:
F00  fileio.asm
F01  errno.inc
F02  fileio.inc


Symbols:
_free IMP REF 
_fclose LAB (0xbe) UNUSED EXPORT sec=CODE 
_malloc IMP REF 
 _fopen .exit LAB (0xb6) sec=CODE 
_errno IMP REF 
 _fopen .found LAB (0x80) sec=CODE 
_strcmp IMP REF 
 _fopen .loop LAB (0x5c) sec=CODE 
 _fopen .enter LAB (0x6e) sec=CODE 
_fopen LAB (0x42) UNUSED EXPORT sec=CODE 
_pak0 IMP REF 
_InitFileSystem LAB (0x12) UNUSED EXPORT sec=CODE 
_flipEndian LAB (0x0) EXPORT sec=CODE 
totalFiles LAB (0x4) REF sec=BSS 
fileTableStart LAB (0x0) REF sec=BSS 
PAK_FILETABLESIZE EXPR(8=0x8) EQU 
PAK_FILETABLE EXPR(4=0x4) EQU 
PAK_ID EXPR(0=0x0) UNUSED EQU 
FILE_SIZE EXPR(4=0x4) EQU 
FILE_DATA EXPR(0=0x0) EQU 
UNKNOWN_INPUT EXPR(9=0x9) UNUSED EQU 
OUT_OF_BOUNDS EXPR(8=0x8) UNUSED EQU 
OUT_OF_MEMORY EXPR(7=0x7) UNUSED EQU 
TOO_LONG EXPR(6=0x6) UNUSED EQU 
DEADLOCK EXPR(5=0x5) UNUSED EQU 
IO_ERROR EXPR(4=0x4) UNUSED EQU 
BAD_ADDRESS EXPR(3=0x3) UNUSED EQU 
DOES_NOT_EXIST EXPR(2=0x2) UNUSED EQU 
FILE_NOT_FOUND EXPR(1=0x1) EQU 
NONE EXPR(0=0x0) UNUSED EQU 
_MOVEMBYTES EXPR(16=0x10) INTERNAL 
 MOVEMSIZE EXPR(4=0x4) INTERNAL 
_MOVEMREGS EXPR(3084=0xc0c) INTERNAL 
__LINE__ EXPR(170=0xaa) INTERNAL 
__FO EXPR(0=0x0) INTERNAL 
__RS EXPR(0=0x0) INTERNAL 
REPTN EXPR(-1=0xffffffff) INTERNAL 
__VASM EXPR(1=0x1) INTERNAL 
__UNIXFS EXPR(0=0x0) INTERNAL 

There have been no errors.
